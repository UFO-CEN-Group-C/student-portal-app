var Team = require('../models/teamModel.js'),
 mongoose = require('mongoose');


exports.create_new_team = function(req, res){
     //Create a new team
     const team = new Team({
          _id: new mongoose.Types.ObjectId(),
          teamName: req.body.teamName,
          members: req.body.members,
          projects: req.body.projects,
          skills: req.body.skills,
          prod_mgr: req.body.prod_mgr,
          scrum_mstr: req.body.scrum_mstr,
          primary_cont: req.body.primary_cont
     });
     //Save the team
     team.save().then( result =>{
          console.log(result);
     })
};

/* Retreive all the teams, sorted alphabetically by team name */
exports.all_teams = (req, res, next) => {
  //This uses the mongo find command to return all teams
console.log('Displaying all teams');
  Team.find({}, null, {sort: {teamname: 1}})
     .exec()
     .then(docs => {
          const response = {
               count: docs.length,
               teams: docs.map(doc => {
                    return {
		
                         teamName: doc.teamName,
                         members: doc.members,
                         projects: doc.projects,
                         skills: doc.skills,
                         prod_mgr: doc.prod_mgr,
                         scrum_mstr: doc.scrum_mstr,
                         primary_cont: doc.primary_cont,
                         /*This will be the method for linking
                         to a team's gitHub repo */
                         gitHub: {
                              type: 'GET',
                              url: 'https://github.com'
                         },
                         request: {
                              type: 'GET',
                              url: 'http://localhost/3000/teams/' + doc._id
                         },
			 _id:doc._id
                    }
               })
          };

          if(docs.length > 0) {
               res.status(200).json(response);
          } else {
               res.status(404).json({
                    message: 'No teams found'
               });
          }
     })
     .catch(err => {
          console.log(err);
          res.status(500).json({
               error: err
          });
     });

};

//This will find a team based on its unique id
exports.find_team = (req, res, next) => {
     const id = req.params.teamName;
     Team.findById(id)
          .exec()
          .then(doc => {
               console.log("From database", doc);
               if(doc) {
                    res.status(200).json(doc);
               } else {
                    res.status(404).json({message: "Team does not exist!"})
               }
          })
          .catch(err => {
               console.log(err);
               res.status(500).json({error: err});
          });
};

exports.update_team = (req, res, next) => {
     //Store teamName as id for search
     const id = req.params.teamName;
     /*The following code will search for any changes to
     fields.  It should not update if fields are empty
     or if fields do not change*/
     const updateOps = {};
     for (const ops of req.body) {
          updateOps[ops.propName] = ops.value;
     }
     Team.update({_id: id}, {$set: updateOps})
          .exec()
          .then(result => {
               console.log(result);
               res.status(200).json(result);
          })
          .catch(err => {
               console.log(err);
               res.status(500).json({
                    error: err
               })
          })

     res.status(200).json({
          message: 'You have updated a specific team',
          teamData: team
     });
};

exports.delete_team = (req, res, next) => {
     //Store teamName property as id for search
     const id = req.params.teamName;
     /*The following will delete a team based on the
     id generated by mongoose */
     Team.remove({_id: id})
          .exec()
          .then(result => {
               res.status(200).json(result);
          })
          .catch(err => {
               console.log(err);
               res.status(500).json({
                    error: err
               })
          })
};
